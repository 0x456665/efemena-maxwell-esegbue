import "reflect-metadata";
import express, { Request, Response } from "express";
import cors from "cors";
import helmet from "helmet";
import swaggerUi from "swagger-ui-express";
import Settings from "./config/settings";
import { errorHandler } from "./middlewares/errorHandler.middleware";
import { RegisterRoutes } from "../build/routes";

/**
 * Initialize Express application and apply middleware configurations.
 * Includes:
 * - Security headers (Helmet)
 * - CORS policy
 * - JSON parsing
 * - Swagger documentation
 * - Global error handling
 */

// Create a new Express application instance
const app = express();

/**
 * -------------------------------
 * Middleware Configuration
 * -------------------------------
 */

// Parse incoming JSON and URL-encoded request bodies
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Apply security headers
app.use(helmet());

// Enable Cross-Origin Resource Sharing (CORS)
app.use(
    cors({
        origin: Settings.CORS_ORIGIN,
        credentials: Settings.CORS_CREDENTIALS,
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    }),
);

// Parse JSON again (redundant but harmless â€” can be removed if unnecessary)
app.use(express.json());

/**
 * -------------------------------
 * API Documentation (Swagger UI)
 * -------------------------------
 *
 * Serves auto-generated OpenAPI documentation from TSOA routes
 * at the `/docs` endpoint.
 */
app.use("/docs", swaggerUi.serve, async (_req: Request, res: Response) => {
    return res.send(swaggerUi.generateHTML(await import("../build/swagger.json")));
});

/**
 * -------------------------------
 * Application Routes
 * -------------------------------
 *
 * Automatically registers routes generated by TSOA decorators.
 */
RegisterRoutes(app);

/**
 * -------------------------------
 * Global Error Handling
 * -------------------------------
 *
 * Catches and formats all thrown or unhandled application errors.
 */
app.use(errorHandler);

export default app;
